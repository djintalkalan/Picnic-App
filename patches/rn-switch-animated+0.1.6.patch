diff --git a/node_modules/rn-switch-animated/index.tsx b/node_modules/rn-switch-animated/index.tsx
index 957bc07..2b960ff 100644
--- a/node_modules/rn-switch-animated/index.tsx
+++ b/node_modules/rn-switch-animated/index.tsx
@@ -1,7 +1,7 @@
 import MaskedView from '@react-native-masked-view/masked-view';
-import React, { FC, useCallback, useEffect, useMemo, useRef } from "react";
+import React, { FC, useCallback, useMemo } from "react";
 import { GestureResponderEvent, Pressable, StyleProp, StyleSheet, Text, TextStyle, View } from "react-native";
-import Animated, { EasingNode, spring } from 'react-native-reanimated';
+import Animated, { Easing, interpolateColor, useAnimatedStyle, useSharedValue, withSpring, withTiming } from 'react-native-reanimated';
 
 export interface SwitchProps {
     value: boolean
@@ -41,62 +41,48 @@ const Switch: FC<SwitchProps> = ({
     springSpeed = 250
 }) => {
 
-    const translateX = useRef(new Animated.Value(value ? -SIZE * 0.25 : -SIZE * 0.75)).current;
+    const sharedValue = useSharedValue(value ? -SIZE * 0.25 : -SIZE * 0.75)
 
-    useEffect(() => {
-        if (animationType == 'timing')
-            Animated.timing(translateX, {
-                toValue: value ? -SIZE * 0.25 : -SIZE * 0.75,
-                duration: duration,
-                easing: EasingNode.in(EasingNode.ease),
-            }).start();
-        else
-            spring(translateX, {
-                toValue: value ? -SIZE * 0.25 : -SIZE * 0.75,
-                mass: 1,
-                damping: 20,
-                stiffness: springSpeed,
-                overshootClamping: false,
-                restSpeedThreshold: 1,
-                restDisplacementThreshold: 0.001,
-            }).start();
-    }, [value, animationType, duration, springSpeed]);
+    const darkKnobStyle = useAnimatedStyle(() => {
+        return {
+            width: SIZE * 0.36,
+            height: SIZE * 0.36,
+            backgroundColor: inactiveKnobColor != activeKnobColor ? interpolateColor(sharedValue.value, [-SIZE * 0.75, -SIZE * 0.26], [inactiveKnobColor, activeKnobColor],) : activeKnobColor,
+            borderRadius: SIZE * 0.18,
+        }
+    });
 
-    const changeableStyles = useMemo(() => {
-        return StyleSheet.create({
-            darkKnob: {
-                width: SIZE * 0.36,
-                height: SIZE * 0.36,
-                //@ts-ignore
-                backgroundColor: inactiveKnobColor != activeKnobColor ? Animated.interpolateColors(translateX, {
-                    inputRange: [-SIZE * 0.75, -SIZE * 0.26],
-                    outputColorRange: [inactiveKnobColor, activeKnobColor],
-                }) : activeKnobColor,
-                borderRadius: SIZE * 0.18,
-            },
-            textContainer: {
-                transform: [
-                    {
-                        translateX: translateX as unknown as number,
-                    },
-                ],
-                position: "absolute",
-                width: SIZE * 2,
-                //@ts-ignore
-                backgroundColor: Animated.interpolateColors(translateX, {
-                    inputRange: [-SIZE * 0.75, -SIZE * 0.26],
-                    outputColorRange: [inactiveColor, activeColor],
-                }),
-                height: SIZE * 0.6,
-                top: -(SIZE * 0.05),
-                borderRadius: SIZE * 0.5,
-                justifyContent: "space-evenly",
-                alignItems: "center",
-                flexDirection: "row",
-                paddingHorizontal: SIZE * 0.3,
-            },
-        })
-    }, [translateX, SIZE, inactiveColor, activeColor, inactiveKnobColor, activeKnobColor])
+    const textContainerStyle = useAnimatedStyle(() => {
+        return {
+            transform: [
+                {
+                    translateX: animationType == 'spring' ?
+                        withSpring(sharedValue.value, {
+                            mass: 1,
+                            damping: 20,
+                            stiffness: springSpeed,
+                            overshootClamping: false,
+                            restSpeedThreshold: 1,
+                            restDisplacementThreshold: 0.001,
+                        }) :
+                        withTiming(sharedValue.value, {
+                            duration: duration,
+                            easing: Easing.in(Easing.ease),
+                        }),
+                },
+            ],
+            position: "absolute",
+            width: SIZE * 2,
+            backgroundColor: interpolateColor(sharedValue.value, [-SIZE * 0.75, -SIZE * 0.26], [inactiveColor, activeColor],),
+            height: SIZE * 0.6,
+            top: -(SIZE * 0.05),
+            borderRadius: SIZE * 0.5,
+            justifyContent: "space-evenly",
+            alignItems: "center",
+            flexDirection: "row",
+            paddingHorizontal: SIZE * 0.3,
+        }
+    });
 
     const styles = useMemo(() => {
         return StyleSheet.create({
@@ -143,7 +129,8 @@ const Switch: FC<SwitchProps> = ({
         })
     }, [SIZE, elevation, inactiveTextStyle, activeTextStyle, textStyle,])
 
-    const onChangeButton = useCallback((e) => {
+    const onChangeButton = useCallback((e: GestureResponderEvent) => {
+        sharedValue.value = !value ? -SIZE * 0.25 : -SIZE * 0.75
         onChange(!value, e)
     }, [value, onChange])
 
@@ -152,9 +139,9 @@ const Switch: FC<SwitchProps> = ({
             <Animated.View style={styles.wrapper}>
                 <MaskedView maskElement={<Animated.View style={styles.container} />}>
                     <View style={styles.container}>
-                        <Animated.View style={changeableStyles.textContainer}>
+                        <Animated.View style={textContainerStyle}>
                             {activeText ? <Text style={styles.activeText}>{activeText}</Text> : null}
-                            <Animated.View style={changeableStyles.darkKnob} />
+                            <Animated.View style={darkKnobStyle} />
                             {inactiveText ? <Text style={styles.inActiveText}>{inactiveText}</Text> : null}
                         </Animated.View>
                     </View>
